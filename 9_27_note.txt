head.s -> kernel的分页(linear->physical affine), 内核使用线性地址 == 内核使用物理地址(*) 0x0c700 -> 0x0c700 (如何分页,看IA32)
   _pg_dir(20 bit就够表示页表了(cpu强制4k(32 - 4k = 20bit)对齐),低12位用于标识符)            
   [10]  
	 			pg 0
				[10]   
							pg
							[12]
推导出线性地址=物理地址恒等 (setup_pageing)

------main.c
一上来就安排内存

块设备缓冲区(内核中) buffer_memory,与硬盘文件打交道的时候,先把数据导入缓冲区,再写到内存中
save 按钮实际上保存在缓冲区中,并不是直接协会到硬盘中()

虚拟盘(makefile描述 2M) id_init hd_init floopy_init
凡是与外设读写打交道的,都使用request

虚拟地址 磁盘模拟为内存(差2数量级)

开中断sti 进程是用户态(进入用户模式)

blk_dev_struct 块设备号 第一项为空(idt gdt等等)
dev mem == rd 虚拟盘
rd dev rd 硬盘

硬盘实际上与缓冲区打交道(读写) request

.request_fn(都是账本) 分别挂上不同的驱动

men_init(以页为单位) ->> mem_map(物理内存)数组记录 分配了多少内存(数组里的一项管理一页)
应用程序需要通过os分配物理内存(线性地址不需要分配),绝对不能分重复
1线性->1物理;  1物理<-n线性
共享内存(父子进程,多个程序使用同一块内存)

因此mem_map使用引用计数,实际上并没有在页中更改,只在计数数组中记录.

trap_init 中断 idt表(目前为空)中断描述符表项

除0错误 0,&divide_error 中断服务程序,因此是(内核,中断)代码段 
0x8 = b1000 => 段选择子(类比CS),  offset(类比IP), DPL(描述符特权集)

GDT 原先3个,现在4个

GDT表
N
k d <- 0x10 
k c <- 8
M <- GDTR

IDTR -> IDT, GDTR-> GDT,寄存器存在GPU中

_set_gate() 门机制	
				不确定->确定
