"c" -> %ecx, (long)task[n]->这里存储的是切换的任务struct指针
xchgl %%ecx, _current 交换值,之后_current指向目标进程(进程1)	
"d" %edx ->TSS[n] (TSS段) tss段的低字传给了 (*&__tmp.b) 这里是tss的数据段选择子

_syscall0 是在用户态下运行的,经过int 0x80后才变为内核态

_set_gate 保证int0x80是必须为用户态(证明)p249

fork -> 压 eip,cs,eflags,esp,ss
p->tss.eax=0 所有的父进程都为0(所有父进程创建子进程的时候都调用copy_process)
按照fork()函数的返回值一定为0,所以进程0创建子进程的时候,要跑init();但是第一次创建进程0的时候,需要跑pause()

跑init()的时候是特权3的进程1


----summary
move_to_user_mode 为 iret前面压栈(但是按理来说,iret是要从3特权到0特权,但是在此之前从来没有3特权出现,因此我们手动模拟压栈)

为什么先要把 movl %%esp %%eax? 因为要完全恢复现场(返回给进程0),后续的压栈操作不应该出现。因此需要把esp的值提前保存.
那么这个栈是干什么用的? 0特权的栈 iret后还用(但是是3特权的进程0用的),而且后续进程0一直在使用这个栈(用户栈),同时进程0的内核栈在#INIT_TASK

push %1f 往后数一行的地址存放到 eip
cs : 0f =  01111 用户代码段 ldt 3
ds: 17 = 10111   用户数据段 ldt 3

head.s _gdt 内核段的代码段基址限长
INIT_TASK ldt 进程0的代码段基址限长

为什么能够就地翻身从0特权变为3特权? 要证明 进程0和内核的基址是一致的
3特权和0特权在同一个线性地址上跑,特权做在cpu上，是一种cpu的访问控制.因此重叠的那部分3特权是能访问到的. 因为一个线性地址只能对应一个物理地址,在当时head.s内核分页的时候 pg +7 (1(su位)11,因此能够让3特权跑)

在iret之前压栈的时候,并没有清理内核栈之前的数据(保存的栈指针是move_to_user_mode的),还能够进行找到数据,说明之后还会用到0特权跑出来的数据.

____fork -> syscall0
int 0x80 __NR_##NAME -> _system_call
:81 表面上是越界检查;实际上按照授权规则,我们要确定性的访问(如果服务多了,说明给内核增加了不确定性,这是不允许的)

后续的五个压栈 为了copy_process 服务,为了初始化tss
后续为段进行处理
_sys_call_table(, %eax, 4) sys_fork = 2 -> nr = 2 (eax的返回值为2,一个指针4个字节),eax * 4 指针 就指向 数组中第三个数据,也就是 sys_fork

____
_sys_fork
 call _find_empty_process 先找task数组,
 进一步压栈
 call _copy_process

____ 
_find_empty_process
首先回滚遍历,进程从低往高遍历.如果找到后(应该找到进程1,放到2号位).后续进程调度(schedule())也要根据task数组中挂号的进程参与进程调度.

___
_copy_process
	之前一系列压栈都是为了创建进程1,使用手工入栈来模拟函数的传参.
	p = (struct task_struct *)get_free_page()
	(第一次动)get_free_page(), 从内存空间中拿了一个页作为内核栈(task_union大小也为一个页,其中包含内核栈与task_struct) 内核栈最多可能用3k,一共一个页是4k,内核栈一定不会覆盖掉task_struct.目前task_union有空间没有值.
	task[nr] = p,把task_struct 复制给子进程.

	进程跑内核态时才会跑内核栈,用户态跑用户栈

	进程0的用户栈user_stack,fork()后压栈压的是内核栈(配合iret,因此是内核栈)
	do_timer调用在内核态,fork用的是用户栈,二者没有关联(如果发生时钟中断)
	get_free_page(在这里只是在mem_map中标记了一项,并没有真正进行页表挂载) 是空闲页,非共享.返回的地址是线性地址(内核态的)
	如果返回的是物理地址??? 物理地址只能出现在写页表项的过程中
	mem_map的引用计数才表示是否分页,而页表分配了地址只能说明分配了地址,不能说明该内存已被使用.
	p = 进程0 task_union在(内核栈与task_struct)物理地址的16M最后一个页表内(在head.s中分配了16M的恒等映射,内核用).
	进程1线性地址空间64M-128M,相应的页表并没有映射到16M的空间(而且无论都跑不到这里,因为目前是内核态)
虽然是给进程1建立了一个get_free_page，但进程1却访问不到
get_free_page()是从后向前遍历,mem_map是从前向后遍历,这是为什么?为了增加安全性,不能让给线性地址推测出物理地址
-----
copy_mem
做线性与物理地址复制(64个64M的线性地址分配)
______
copy_page_table
(子进程复制父进程,1 复制 0)复制页目录表项与对应的页表项
这里再次get_free_page,这里给进程1做一个页表(同样进程1访问不到这里)
-----
sys_pause
进行调度
从末尾往头进行遍历,目前只有进程1是就绪态
内核与进程一定要有关系(某个进程的内核态)
-----
switch_to
IOPL 是eflag里的一个标识,当IOPL=0时(INIT_TASK然后 鸟居 钨合金棍),特权指令(cli等)只能在0特权用；并且由于父进程创建子进程,进程0的IOPL=0,则子进程都为0(即用户进程不能使用特权指令)
