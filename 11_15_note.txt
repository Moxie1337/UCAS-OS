-----
bread

块设备,以块为大小进行管理的
缓冲区 0特权的内核区域,线性地址空间,作为普通文件的缓冲区

find_buffer里的判断条件
tmp == hash(dev, block) 返回哈希表的序号,并且比较找到的数据号和块号是否存在,如果存在的话就直接用缓冲区的数据,否则才需要从硬盘中加载到缓冲区

get_has_table 返回NULL给get_blk,因此bh(buffer_head *) 为 NULL,说明缓冲区里没有现成的,

buffer_head 管理 缓冲块的信息.

-------
get_blk
tmp 临时查找缓冲区的buffer_head；bh 现成的缓冲区的buffer_head(上红叉)

由于bh为NULL(当前设备号块号)在缓冲区里没有现成的,因此把 tmp = free_list(蓝色的线)

我们因此要找到空的缓冲块(b->count = 0),如果现在没有现成的,并且所有的缓冲块都有人使用,则等待.

BADNESS(有现成的不代表立刻就要用现成的),即使是缓冲区空闲,但有可能没有同步(即缓冲区里的数据没有写回硬盘) 同步机制与缓冲区机制是两个机制,在保存文件的时候只是写在了缓冲区上(脏位置1),在关机的时候强制启动同步机制(把缓冲区里的脏位写回到硬盘里)

if (!bh || BADNESS(tmp) < BADNESS(bh))
 脏位只有在同步机制的时候才会启动,而lock则是避免竞争时直接设立,因此脏位更bad

 我们在初始化的时候将buffer_head指向了缓冲区的块

 真正进到缓冲区上的是红叉上的buffer_head(现成的缓冲区),我们根据设备号块号来决定红叉子(hash_table)上的index


 wait_on_buffer
  why while(bh->b_lock) not if(xxxx)

在 main里 buffer_init() 中 初始化buffer_head, 其中b->count = 0

remove_from_queues 脱钩
insert_into_queues 放到叉子上

目前返回的hd是空闲的缓冲块
------
在 bread里调用
ll_rw_block,在此之前玩儿缓冲区,在此之后玩儿同步()
底层读写块

NR_BLK_DEV 块设备

if(major xxx)用来表示请求项的设备是否为7个设备
dev 从 bread中的参数决定了 设备号(0x300 + ...)与块号(0)
MAJOR(右移8位)，由于之前的块设备右移8位是0x3 011,因此在blk_dev中是第四项(硬盘)

在hd_init中挂在上了硬盘的请求项
blk_dev[3].fn_request = do_hd_request

因为缓冲区是3k多,所以请求项是32个(硬盘 内存 之间速率差两个数量级,因此大约 / 100)

缓冲区对应 缓冲区到用户进程(内存的关系),除此之外还要有缓冲区到硬盘(这一部分请求项负责)
其中的判断主要有以下两个部分组成:
blk_dev_struct 包含两个成员:
请求项处理函数,(*request_fn)(void) 再hd_init中已经挂载了请求项
请求项数组 struct *request 请求项的32个,指向当前的请求项 挂在do_hd_request

-------------
make_request(major=3(hd), rw=0(READ), bh(空闲缓冲块))

lock_buffer(hd) 给 进程从缓冲区读的操作,避免缓冲区的竞争(给缓冲区加锁)
******多个进程(进程共享，都等待着一个缓冲块)等待某一个缓冲块被解锁(设备号块号唯一确定缓冲块)
-----
lock_buffer 原子操作 关中断开中断;没锁加锁,有锁 sleep_on(我们在进程和缓冲区中加锁)
在这里为什么使用while?
sleep_on 利用内核栈构建成缓冲块的等待队列.不一定一次if后就能找到

b->up_dodate 表明已经读过了

cli()只是针对当前的进程的中断保存在tss的eflags中(eflags 中 if位置1),另外的进程中并没有关中断，于是切换进程的时候仍旧回复其他进程的数据，不是把整个os的都关了.

--repeat
读操作 硬盘 -> 缓冲区->用户进程 很急地从硬盘中写到buffer
写操作 用户进程 -> 缓冲区 不着急把buffer里的数据写回硬盘

req = request + NR_REQUEST ,遍历request数组。读操作从末尾开始向前查找；写操作从2/3的位置开始往回遍历。 因此我们设计的时候让读操作检索成功的可能性更大

func blk_dev_init 将请求项的dev都设置为-1,next为NULL. 这里request是数组链表
next为NULL说明32个请求项都是单个的,-1与count作用类似,表明是否有进程使用缓冲块

目前来说找到最后一个请求项

如果所有请求项都被占用,则等待(********现在是等待请求项,等待所有的请求项是否有空)
一个扇区512B,一个块1K = 2个扇区

我们就是在32个请求数字里做的请求项,但是目前没有挂到链上。我们同步的时候是遍历便利链上的请求项
------
在make_request后我们找到了一个请求项,但是还没加到链上
add_request(major + blk_dev(目前是第四项块设备，是硬盘), req(刚做好的请求项))
防止什么竞争？
目前是读操作,请求项的操作是要把数据读到缓冲块中bh所指向的缓冲块
if (req->bh) 判断目前是否找到空闲的缓冲块

操作系统操作硬盘最小是块(1k),对于评判来说按照块大小
