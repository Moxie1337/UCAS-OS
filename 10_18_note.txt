进程0构建 + 3特权模式后->创建子进程
所有父进程创建子进程都走这个流程

_syscall0
int 0x80 软中断 压五个栈

系统调用 剥夺了用户进程访问外设的能力
以授权为单位,按照授权分配
授权的单位是一次用户程序的独立访问
内核提供确定性的,替代用户访问用户程序的,符合授权的访问权利 拦截不确定性

0x10 内核数据段 0x17 用户数据段
_sys_call_table eax为传进来的数 eax(4) 2 * 4因此指向 fork的函数指针  (2 fork)
fn_ptr 函数指针,每一个指针4字节
-----
_sys_fork
find_empty_process，该函数return了，执行后不再栈中留下痕迹,返回的下标存在eax中(进程1创建，因此返回进程编号1)
之后压栈(参数见copy_process)
但_sys_table仍未结束,还在栈中

进程的核心task_struct(union,内核栈),task[]数组,其中包含进程的指针
目前task[]中只有进程0,要创立进程1

long last_pid = 0 全局变量,来了一个进程则+1.统计一共跑了多少个进程(日志作用)
 用eax接收函数返回值(内嵌汇编)

压栈

 _copy_process
c和语言:实参传形参 (GCC) -> 在栈中传参
int0x80 (3特权进程0的) cs:epi ->把下一条指令压栈

nr 1 task[] 要创建的进程下标

none

get_free_page 空闲页 引用计数count=0 与mem_map(内存帐) 一个元素与一个页对应有关
在这里分配内存  找空闲页从高往低查
OS两种内存分配: 1.空闲页(count必须为0) 2.页共享
